include.mean = T),
distribution.model = "norm")
fit22n = ugarchfit(garch22n,Log_R)
#2,2 std Garch-------------------------------
garch22t = ugarchspec(variance.model = list(model = "fGARCH",
submodel = "GARCH",
garchOrder = c(2,2)),
mean.model = list(armaOrder = c(0,0),
include.mean = T),
distribution.model = "std")
fit22t = ugarchfit(garch22t,Log_R)
infocriteria(fit22t)[1:2,]
source('C:/Users/Jiaqi Li/Desktop/class materials/quarter 2/19W-MGMTMFE407-2-files/hw4/hw6.R')
infocriteria(fit22n)[1:2,]
infocriteria(fit22t)[1:2,]
test = do.call(cbind, infocriteria(fit22n)[1:2,],
infocriteria(fit22t)[1:2,],
infocriteria(fit22n_i)[1:2,],
infocriteria(fit22t_i)[1:2,],
infocriteria(fit22n_e)[1:2,],
infocriteria(fit22t_e)[1:2,],
infocriteria(fit22n_gjr)[1:2,],
infocriteria(fit22t_gjr)[1:2,])
test = do.call("cbind", list(infocriteria(fit22n)[1:2,],
infocriteria(fit22t)[1:2,],
infocriteria(fit22n_i)[1:2,],
infocriteria(fit22t_i)[1:2,],
infocriteria(fit22n_e)[1:2,],
infocriteria(fit22t_e)[1:2,],
infocriteria(fit22n_gjr)[1:2,],
infocriteria(fit22t_gjr)[1:2,]))
test
test = do.call("rbind", list(infocriteria(fit22n)[1:2,],
infocriteria(fit22t)[1:2,],
infocriteria(fit22n_i)[1:2,],
infocriteria(fit22t_i)[1:2,],
infocriteria(fit22n_e)[1:2,],
infocriteria(fit22t_e)[1:2,],
infocriteria(fit22n_gjr)[1:2,],
infocriteria(fit22t_gjr)[1:2,]))
test
fit22t_gjr
garch22t_gjr
fit22t_gjr
source('C:/Users/Jiaqi Li/Desktop/class materials/quarter 2/19W-MGMTMFE407-2-files/hw4/hw6.R')
order22 = do.call("rbind", list(infocriteria(fit22n)[1:2,],
infocriteria(fit22t)[1:2,],
infocriteria(fit22n_i)[1:2,],
infocriteria(fit22t_i)[1:2,],
infocriteria(fit22n_e)[1:2,],
infocriteria(fit22t_e)[1:2,],
infocriteria(fit22n_gjr)[1:2,],
infocriteria(fit22t_gjr)[1:2,]))
install.packages("finmetrics")
setwd("C:/Users/Jiaqi Li/Desktop/class materials/quarter 2/19W-MGMTMFE407-2-files/hw4/Hyeuk")
library(data.table)
library(dplyr)
library(readxl)
library(rugarch)
library(fGarch)
library(sandwich)
##### Problem 1: Risk Management using Value-at-Risk and GARCH Models ----
raw <- read_xlsx("Currency_fund_prices.xlsx") %>% as.data.table; gc()
data <- raw[, -c(2:5)]
data$lag_adj <- shift(data$`Adj Close`, 1)
data$log_ret <- log(data$`Adj Close` / data$lag_adj)
garch_z <- ugarchspec(variance.model = list(model = "fGARCH", submodel = "GARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = T),
distribution.model = "norm")
garch_t <- ugarchspec(variance.model = list(model = "fGARCH", submodel = "GARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = T),
distribution.model = "std")
# I-GARCH(1,1)
igarch_z <- ugarchspec(variance.model = list(model = "iGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = T),
distribution.model = "norm")
igarch_t <- ugarchspec(variance.model = list(model = "iGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = T),
distribution.model = "std")
# GARCH-M not supported in rugarch package
# M stands for multivariate..?
# E-GARCH(1,1)
egarch_z <- ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = T),
distribution.model = "norm")
egarch_t <- ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = T),
distribution.model = "std")
# GJR-GARCH(1,1)
gjrgarch_z <- ugarchspec(variance.model = list(model = "gjrGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = T),
distribution.model = "norm")
gjrgarch_t <- ugarchspec(variance.model = list(model = "gjrGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = T),
distribution.model = "std")
# Fitting the date to the models
test_data <- data[-1, "log_ret"]
garchfit_z <- ugarchfit(garch_z, test_data)
garchfit_t <- ugarchfit(garch_t, test_data)
igarchfit_z <- ugarchfit(igarch_z, test_data)
igarchfit_t <- ugarchfit(igarch_t, test_data)
egarchfit_z <- ugarchfit(egarch_z, test_data)
egarchfit_t <- ugarchfit(egarch_t, test_data)
gjrgarchfit_z <- ugarchfit(gjrgarch_z, test_data)
gjrgarchfit_t <- ugarchfit(gjrgarch_t, test_data)
# Combine Information Criterion from each model
result <- do.call("rbind", list(infocriteria(garchfit_z)[1:2,], infocriteria(garchfit_t)[1:2,],
infocriteria(igarchfit_z)[1:2,], infocriteria(igarchfit_t)[1:2,],
infocriteria(egarchfit_z)[1:2,], infocriteria(egarchfit_t)[1:2,],
infocriteria(gjrgarchfit_z)[1:2,], infocriteria(gjrgarchfit_t)[1:2,])
) #[1:2]
row.names(result) <- c("GARCH(1,1)-z", "GARCH(1,1)-t",
"I-GARCH(1,1)-z", "I-GARCH(1,1)-t",
"E-GARCH(1,1)-z", "E-GARCH(1,1)-t",
"GJR-GARCH(1,1)-z", "GJR-GARCH(1,1)-t")
garch22n = ugarchspec(variance.model = list(model = "fGARCH",
submodel = "GARCH",
garchOrder = c(2,2)),
mean.model = list(armaOrder = c(0,0),
include.mean = T),
distribution.model = "norm")
fit22n = ugarchfit(garch22n,test_data)
#2,2 std Garch--------------------------------------------
garch22t = ugarchspec(variance.model = list(model = "fGARCH",
submodel = "GARCH",
garchOrder = c(2,2)),
mean.model = list(armaOrder = c(0,0),
include.mean = T),
distribution.model = "std")
fit22t = ugarchfit(garch22t,test_data)
#2,2 normal iGarch--------------------------------------------
garch22n_i = ugarchspec(variance.model = list(model = "iGARCH",
submodel = "GARCH",
garchOrder = c(2,2)),
mean.model = list(armaOrder = c(0,0),
include.mean = T),
distribution.model = "norm")
fit22n_i = ugarchfit(garch22n_i,test_data)
#2,2 normal iGarch--------------------------------------------
garch22t_i = ugarchspec(variance.model = list(model = "iGARCH",
submodel = "GARCH",
garchOrder = c(2,2)),
mean.model = list(armaOrder = c(0,0),
include.mean = T),
distribution.model = "std")
fit22t_i = ugarchfit(garch22t_i,test_data)
#2,2 normal eGarch--------------------------------------------
garch22n_e = ugarchspec(variance.model = list(model = "eGARCH",
submodel = "GARCH",
garchOrder = c(2,2)),
mean.model = list(armaOrder = c(0,0),
include.mean = T),
distribution.model = "norm")
fit22n_e = ugarchfit(garch22n_e,test_data)
#2,2 normal eGarch--------------------------------------------
garch22t_e = ugarchspec(variance.model = list(model = "eGARCH",
submodel = "GARCH",
garchOrder = c(2,2)),
mean.model = list(armaOrder = c(0,0),
include.mean = T),
distribution.model = "std")
fit22t_e = ugarchfit(garch22t_e,test_data)
#2,2 normal gjrGarch--------------------------------------------
garch22n_gjr = ugarchspec(variance.model = list(model = "gjrGARCH",
submodel = "GARCH",
garchOrder = c(2,2)),
mean.model = list(armaOrder = c(0,0),
include.mean = T),
distribution.model = "norm")
fit22n_gjr = ugarchfit(garch22n_gjr,test_data)
#2,2 normal gjrGarch--------------------------------------------
garch22t_gjr = ugarchspec(variance.model = list(model = "gjrGARCH",
submodel = "GARCH",
garchOrder = c(2,2)),
mean.model = list(armaOrder = c(0,0),
include.mean = T),
distribution.model = "std")
fit22t_gjr = ugarchfit(garch22t_gjr,test_data)
order22 = do.call("rbind", list(infocriteria(fit22n)[1:2,],
infocriteria(fit22t)[1:2,],
infocriteria(fit22n_i)[1:2,],
infocriteria(fit22t_i)[1:2,],
infocriteria(fit22n_e)[1:2,],
infocriteria(fit22t_e)[1:2,],
infocriteria(fit22n_gjr)[1:2,],
infocriteria(fit22t_gjr)[1:2,]))
row.names(order22) <- c("GARCH(2,2)-z", "GARCH(2,2)-t",
"I-GARCH(2,2)-z", "I-GARCH(2,2)-t",
"E-GARCH(2,2)-z", "E-GARCH(2,2)-t",
"GJR-GARCH(2,2)-z", "GJR-GARCH(2,2)-t")
f_Garch = function(name,subname,Gorder,dist){
garch = ugarchspec(variance.model = list(model = name,
submodel = subname,
garchOrder = Gorder),
mean.model = list(armaOrder = c(0,0),
include.mean = T),
distribution.model = dist)
return(garch)
}
test = f_Garch("gjrGARCH","GARCH",c(2,2),"norm")
testfit = ugarchfit(test,Log_R)
infocriteria(testfit)[1:2]
list(infocriteria(fit22n)[1:2,]
)
infocriteria(testfit)[1:2,]
AICBIC(test,Log_R)
AICBIC = function(model,data){
fit = ugarchfit(model,data)
return(infocriteria(testfit)[1:2,])
}
AICBIC(test,Log_R)
row.names(order22) <- c("GARCH(2,2)-z", "GARCH(2,2)-t",
"I-GARCH(2,2)-z", "I-GARCH(2,2)-t",
"E-GARCH(2,2)-z", "E-GARCH(2,2)-t",
"GJR-GARCH(2,2)-z", "GJR-GARCH(2,2)-t")
order22
All = rbind(result,order22)
All
All = cbind(result,order22)
All
order22_names = c("GARCH(2,2)-z", "GARCH(2,2)-t",
"I-GARCH(2,2)-z", "I-GARCH(2,2)-t",
"E-GARCH(2,2)-z", "E-GARCH(2,2)-t",
"GJR-GARCH(2,2)-z", "GJR-GARCH(2,2)-t")
order22_names
All = cbind(result,order22_names,order22)
All
View(All)
All = rbind(result,order22)
All
View(All)
All = cbind(result,order22)
All = cbind(result,order22)
All
All = rbind(result,order22)
All
order22
min(order22[,"Akaike"])
which(min(order22[,"Akaike"]))
min(order22[,"Bayes"])
order22
which(min(order22[,"Akaike"]) == order22[,"Akaike"])
which(min(order22[,"Akaike"]) == order22[,"Akaike"])
which(min(order22[,"Bayes"]) == order22[,"Bayes"])
forecast <- ugarchforecast(egarchfit_t, n.ahead = 20)
plot(forecast) # have make a plot selection (1 or 3 works)
forecast <- ugarchforecast(egarchfit_t, n.ahead = 20)
plot(forecast) # have make a plot selection (1 or 3 works)
plot(sigma(forecast), main = "20-Trading-Day Log Return Volatility")
plot(forecast) # have make a plot selection (1 or 3 works)
plot(sigma(forecast), main = "20-Trading-Day Log Return Volatility")
which(min(result[,"Akaike"]) == result[,"Akaike"])
which(min(result[,"Bayes"]) == result[,"Bayes"])
which(min(order22[,"Akaike"]) == order22[,"Akaike"])
which(min(order22[,"Bayes"]) == order22[,"Bayes"])
All[6,:]
All[6,]
All[c("E-GARCH(1,1)-t","E-GARCH(2,2)-t"),]
library(data.table)
library(dplyr)
library(readxl)
library(rugarch)
library(fGarch)
install.packages("fGarch")
acf(test_data)
pacf(test_data)
acf(V)
pacf(V)
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
type = "-o-")
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
type = "-o")
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
type = "l")
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
type = "l")
abline(volatility, col = "red")
volatility <- sqrt(sum(sigma(forecast)^2)) # 0.03474748
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
type = "l")
abline(volatility, col = "red")
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
type = "l")
lines(volatility, col = "red")
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
type = "l", ylim = c(0.006,0.0085))
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
type = "l", ylim = c(0.006,0.0081))
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
type = "l", ylim = c(0.006,0.0081))
lines(volatility, col = "red")
?lines
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
type = "l", ylim = c(0.006,0.0081))
lines(y = volatility, col = "red")
seq(10)
sigma(forecast)
length(sigma(forecast))
volatility <- sqrt(sum(sigma(forecast)^2)) # 0.03474748
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
type = "l", ylim = c(0.006,0.0081))
lines(x = seq(length(sigma(forecast))),
y = volatility, col = "red")
?abline
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
type = "l", ylim = c(0.006,0.0081))
abline(h = volatility, col = "red")
volatility
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility")
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
ylim = c(0.0081,0.0074))
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
ylim = c(0.0074,0.0081))
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
type = "l")
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
ylim = c(0.0074,0.0081),
type = "l")
volatility <- sqrt(sum(sigma(forecast)^2))
print(volatility)
print(sigma(forecast))
as.vector(sigma(forecast))
plot(volatility_pred,
main = "20-Trading-Day Log Return Volatility",
type = "l")
volatility_pred = as.vector(sigma(forecast))
plot(volatility_pred,
main = "20-Trading-Day Log Return Volatility",
type = "l")
volatility_pred = as.vector(sigma(forecast))
plot(volatility_pred,
main = "20-Trading-Day Log Return Volatility",
ylim = c(0.0074,0.0081),
type = "l")
plot(sigma(forecast),
main = "20-Trading-Day Log Return Volatility",
ylim = c(0.0074,0.0081),
type = "l")
volatility_pred = as.vector(sigma(forecast))
plot(volatility_pred,
main = "20-Trading-Day Log Return Volatility",
ylim = c(0.0074,0.0081),
type = "l")
sqrt(sum(volatility_pred^2))
volatility_pred = data.frame(as.vector(sigma(forecast)))
volatility_pred
volatility_pred = matrix(as.vector(sigma(forecast)),
nrow = 1,
ncol = length(sigma(forecast)))
volatility_pred
#plot(forecast) # have to make a plot selection (unconditional)
plot(volatility_pred,
main = "20-Trading-Day Log Return Volatility",
type = "l")
vola = as.vector(sigma(forecast))
volatility_pred = matrix(vola, nrow = 1,
ncol = length(sigma(forecast)))
#plot(forecast) # have to make a plot selection (unconditional)
plot(volatility_pred,
main = "20-Trading-Day Log Return Volatility",
type = "l")
#plot(forecast) # have to make a plot selection (unconditional)
plot(vola,
main = "20-Trading-Day Log Return Volatility",
type = "l")
row.names(volatility_pred) = c("T+1","T+2","T+3","T+4","T+5",
"T+6","T+7","T+8","T+9","T+10",
"T+11","T+12","T+13","T+14","T+15",
"T+16","T+17","T+18","T+19","T+20",)
row.names(volatility_pred) = c("T+1","T+2","T+3","T+4","T+5",
"T+6","T+7","T+8","T+9","T+10",
"T+11","T+12","T+13","T+14","T+15",
"T+16","T+17","T+18","T+19","T+20")
row.names(volatility_pred)
volatility_pred
col.names(volatility_pred) = c("T+1","T+2","T+3","T+4","T+5",
"T+6","T+7","T+8","T+9","T+10",
"T+11","T+12","T+13","T+14","T+15",
"T+16","T+17","T+18","T+19","T+20")
column.names(volatility_pred) = c("T+1","T+2","T+3","T+4","T+5",
"T+6","T+7","T+8","T+9","T+10",
"T+11","T+12","T+13","T+14","T+15",
"T+16","T+17","T+18","T+19","T+20")
colnames(volatility_pred) = c("T+1","T+2","T+3","T+4","T+5",
"T+6","T+7","T+8","T+9","T+10",
"T+11","T+12","T+13","T+14","T+15",
"T+16","T+17","T+18","T+19","T+20")
volatility_pred
setwd("C:/Users/Jiaqi Li/Dropbox/MFE 2019 Study Group/Empirical Methods/hw4")
print(volatility)
industry_48 <- read.csv("48_Industry_Portfolios_vw.csv", header = T) %>% as.data.table; gc()
famafrench <- read.csv("F-F_Research_Data_Factors.csv", header = T) %>% as.data.table; gc()
#industry_48[, Date := as.Date(as.character(X), "%Y%m")] -> Does not work
# Subset the data: year 1960~2015 & without -99.99 and missing values
industry_48$year <- as.numeric(substr(industry_48$X, 1, 4)) # get year info of each row
industry <- industry_48[ (industry_48$year >= 1960) & (industry_48$year < 2016), ] # year condition
industry[industry == -99.99] <- NA # changing -99.99 values to NA
industry[industry == -999] <- NA
industry_filtered <- industry %>% select_if( ~ !any(is.na(.)) ) # removing columns with NAs
# merge industry data and Rf from Fama-French data
data2 <- merge(industry_filtered, famafrench, by = "X")
#data2$year <- NULL
### Q1. Regress the industry excess return on the market excess return
regression <- function(x) {
out <- lm( (x-data2$RF) ~ data2$Mkt.RF )
summary <- summary(out)
alpha <- summary$coefficients[1, 1] # intercept for (c)
beta <- summary$coefficients[2, 1] # beta for (a)                     #out$coef[2]
hac <- sqrt(vcovHC(out, type = "HC")[2, 2]) # standard error for (a)  #print(hac)
rsquared <- summary$r.squared # R^2 for (b)
return(c(alpha, beta, hac, rsquared)) # does not return column names
}
industry_coef <- sapply(data2[, 2:44], regression) #data2[, 2:44]
row.names(industry_coef) <- c("Intercept", "Beta", "HAC", "R-Squared")
# Q1 (a). Bar plot
barplot(industry_coef["Beta", ])
x-data2$RF
data2[, 2:44]
industry_coef
plot(abs(test_data-mean(test_data)))
mean(test_data)
test_data
class(test_data)
mean(test_data$log_ret)
test_data
plot(abs(test_data$log_ret-mean(test_data$log_ret)))
plot(abs(test_data$log_ret-mean(test_data$log_ret)),
col = "lightgray", type = "l")
plot(abs(test_data$log_ret-mean(test_data$log_ret)),
col = "lightgray", type = "l", xlab = "time",
ylab = "volatility")
egarchfit_t
plot(egarchfit_t)
plot(egarchfit_t)
plot(egarchfit_t)
egarchfit_t
class(egarchfit_t)
?egarchfit_t
mu = mean(test_data)
V=c()
for (i in 1:length(test_data)){
V = c(V,(mu - test_data[i])^2)
}
V
test_data
mu = mean(test_data$log_ret)
V=c()
for (i in 1:length(test_data$log_ret)){
V = c(V,(mu - test_data$log_ret[i])^2)
}
V
egarchfit_t
plot(egarchfit_t@fit$sigma)
plot(egarchfit_t@fit$sigma, type = "l")
plot(abs(test_data$log_ret-mu),
col = "lightgray", type = "l", xlab = "time",
ylab = "volatility")
lines(egarchfit_t@fit$sigma, type = "l",col = "red")
?legend
plot(abs(test_data$log_ret-mu),
col = "lightgray", type = "l", xlab = "time",
ylab = "volatility",
main = "Actual vs Fitted")
lines(egarchfit_t@fit$sigma, type = "l",col = "red")
legend(legend = c("estimated","actual"),
lty = 1, col = c("red","grey"))
plot(abs(test_data$log_ret-mu),
col = "lightgray", type = "l", xlab = "time",
ylab = "volatility",
main = "Actual vs Fitted")
lines(egarchfit_t@fit$sigma, type = "l",col = "red")
legend("topright",legend = c("estimated","actual"),
lty = 1, col = c("red","grey"))
plot(abs(test_data$log_ret-mu),
col = "lightgray", type = "l", xlab = "time",
ylab = "volatility",
main = "Actual vs Fitted")
lines(egarchfit_t@fit$sigma, type = "l",col = "blue")
legend("topright",legend = c("estimated","actual"),
lty = 1, col = c("red","grey"))
plot(abs(test_data$log_ret-mu),
col = "lightgray", type = "l", xlab = "time",
ylab = "volatility",
main = "Actual vs Fitted")
lines(egarchfit_t@fit$sigma, type = "l",col = "blue")
legend("topright",legend = c("estimated","actual"),
lty = 1, col = c("blue","grey"))
source('C:/Users/Jiaqi Li/Desktop/class materials/quarter 2/19W-MGMTMFE407-2-files/hw4/Hyeuk/hw4 edit.R', echo=TRUE)
plot(abs(test_data$log_ret-mu),
col = "lightgray", type = "l", xlab = "time",
ylab = "volatility",
main = "Actual vs Fitted")
lines(egarchfit_t@fit$sigma, type = "l",col = "steelblue")
legend("topright",legend = c("estimated","actual"),
lty = 1, col = c("steelblue","grey"))
